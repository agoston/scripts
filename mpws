#!/usr/bin/perl
# wrapper script around original mplayer. Goals:
# - detect ac3 sound and use hwac3 output (for amplifiers with ac3 over spdif support)
# - same for dts
# - transcode AAC to AC3 (my little amp has no aac support)
#
# Based on filename:
# - detect aspect ratio, expand picture to full screen so that subtitles are positioned in the lower black area
# - rotate +-90 degrees
# - detect correct sub
# - sub fps and offset settings
# - set aspect
#
# Some extras (commented out but could come handy):
# - taskset 0x4, so that mplayer always runs on the same core (workaround for already fixed bug)
# - swgov to set governor to performance and avoid ondemand's contast scalebacks in some cases (workaround for already fixed bug)
# - iecset, to switch spdif port back to digital (workaround for already fixed bug)
# agoston, 2009-07-25, 2014-12-15

use warnings;
use strict;

use Data::Dumper;

my %info;
my @cmdline;

my $hostname = `hostname`;
chomp $hostname;

# get mplayer info of file - this is hacked, but the _only_ known way to be able to pass over filename unaltered
# (otherwise, command arguments are separated by spaces)
my $pid = open(MPINFO, '-|');
$SIG{PIPE} = sub { die "pipe broken in sigpipe" };
if ($pid) { # parent
	while (<MPINFO>) {
		print $_;
		my ($key, $value) = m/^(\w+)=(.+)$/;
		chomp $key;
		chomp $value;
		$info{$key} = $value;
	}
} else { # child
	# '-channels 6', hogy az identify ne irja felul a 2 csatornara konverzioval a valodi csatorna-szamot
	exec('mplayer', '-really-quiet', '-channels', '6', '-identify', '-ao', 'null', '-vo', 'null', '-frames', '0', @ARGV, '2>/dev/null');
}

close MPINFO;
#print Dumper \%info;

my $width = $info{'ID_VIDEO_WIDTH'};
my $height = $info{'ID_VIDEO_HEIGHT'};

### extract info from filename
my $file = $ARGV[0];
my @fn = split /\./, $file;
my $fext = pop @fn;
for (my $i = pop @fn; $i; $i = pop @fn) {
	if ($i eq '90rot') {
		push @cmdline, qw|-vf-add rotate=1|;
	} elsif ($i eq '-90rot') {
		push @cmdline, qw|-vf-add rotate=2|;
	} elsif ($i =~ m/^(\d+)aspect$/) {
		my $aspect = $1;
		if ($fn[$#fn] =~ m/^\d+$/) {
			$aspect = pop(@fn).':'.$aspect;
		}
		push @cmdline, '-aspect', $aspect;
        } elsif ($i =~ m/^(-?\d+)avdelay$/) {
		my $avdelay = $1;
		if ($fn[$#fn] =~ m/^-?\d+$/) {
			$avdelay = pop(@fn).'.'.$avdelay;
		}
		push @cmdline, '-delay', $avdelay;
	} elsif ($i =~ m/^(\d+)volume$/) {
		my $volume = $1;
		push @cmdline, '-af', 'volume='.$volume;
	} elsif ($i eq 'halfsbs') {
		push @cmdline, '-vf-add', 'crop='.($width/2).':'.$height.':0:0';
		push @cmdline, '-vf-add', 'dsize='.($width).':'.$height;
	} elsif ($i =~ m/^([a-z]{2,3})lang/) {
		push @cmdline, '-slang', $1, '-alang', $1;
	} else {
		### when meeting an unknown element, continue
		push @fn, $i;
		last;
	}
}

print Dumper \@fn;
### find corresponding subtitles
$file = join('.', @fn);
open(SUBSEARCH, 'ls -1 \''.$file.'\'.*sub \''.$file.'\'.*srt 2>/dev/null |');  # for some reason, *{sub,srt} did not work (only in perl 5.8.9)
while (<SUBSEARCH>) {
	chomp;
	my @sn = split /\./;
	my $sext = pop @sn;
	for (my $i = pop @sn; $i; $i = pop @sn) {
		if ($i =~ m/^(\d+)fps$/) {
			### previous tag is number? if yes, attach to this one
			my $fps = $1;
			if ($sn[$#sn] =~ m/^\d+$/) {
				$fps = pop(@sn).'.'.$fps;
			}
			push @cmdline, '-subfps', $fps;
		} elsif ($i =~ /^(-?\d+)ofs$/) {
			### previous tag is number? if yes, attach to this one
			my $ofs = $1;
			if ($sn[$#sn] =~ m/^-?\d+$/) {
				$ofs = pop(@sn).'.'.$ofs;
			}
			push @cmdline, '-subdelay', $ofs;
		} else {
			### when meeting an unknown element, continue
			next;
		}
	}
	push @cmdline, '-sub', $_;
	last; # ouch!
}
close(SUBSEARCH);

### full screen - always on for movies
push @cmdline, '-fs';

# lavdopts threads
push @cmdline, qw|-lavdopts threads=4|;

# per host-specific stuff
if ($hostname eq 'bruin') {
	push @cmdline, qw|-vo gl|;
	$ENV{'ALSA_CARD'} = 'Audigy2';
}

### csak ha mpws-kent van inditva
if ($0 =~ /mpws$/) {
	# hw ac3/dts decoding
	if ($info{'ID_AUDIO_FORMAT'} eq '8192') {
		push @cmdline, qw|-ac hwac3|;
	} elsif ($info{'ID_AUDIO_FORMAT'} eq '8193') {
		push @cmdline, qw|-ac hwdts|;
	} elsif ($info{'ID_AUDIO_FORMAT'} eq 'MP4A') { # AAC
		if ($info{'ID_AUDIO_NCH'} > 2) {
			no warnings 'qw';
			push @cmdline, qw|-ac hwac3, -channels 6 -af channels=6,lavcac3enc=1:640:3|;
		}
	}
}

### ratio setting
if (defined $width && defined $height && ($width > 0) && ($height > 0)) {
	my $ratio = $width / $height;
	if ($ratio > 16/10) {
		push @cmdline, qw|-vf-add expand=:::::16/10|;
	}
}

### extra args passed on cmdline
push @cmdline, @ARGV[0..$#ARGV];

# to work around spdif bug that switched spdif to non-audio, and thus,
# pcm won't be sent through spdif but analogue
# agoston, 2009-09-03
#if ($hostname eq 'bruin') {
#	system("iecset audio true");
#}

# set cpu governor to performance - ubuntu jaunty has skipping problems with mplyayer otherwise
# agoston, 2010-03-20
#system("sd /home/us/bin/swgov 2 performance");

#unshift @cmdline, qw/taskset 0x4 mplayer/;
unshift @cmdline, qw/mplayer/;
print Dumper \$hostname,\@cmdline;
system(@cmdline);

#if ($hostname eq 'bruin') {
#	system("iecset audio true");
#}

#system("sd /home/us/bin/swgov 2 ondemand");
